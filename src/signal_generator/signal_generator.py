from typing import List
from src.order_manager.order_manager import OrderManager
from src.models.target_model import TargetModel
from src.market_feed.market_feed import MarketDataFeed

class SignalGenerator:
    def __init__(self, target_model: TargetModel, market_data_feed: MarketDataFeed, subscribers= List[OrderManager]=[]):
        """
        Initialize the SignalGenerator with a trading client.

        Parameters:
        - trading_client: An instance of TradingClient that will be used to execute trades.

        Returns:
        - None
        """
        self._subscribers = subscribers
        self._target_model = target_model
        self._market_data_feed = market_data_feed
        self.signals = []
        
    def refresh(self, latest_prices):
        """
        Refresh the signal generator's state, typically to update any cached data or
        to synchronize with the latest market conditions.

        Returns:
        - None
        """
        # Placeholder for refreshing logic, if needed
        self.latest_prices = latest_prices
        self.signals = self.generate_signals()
        self.publish_signals()
    
    def publish_signals(self):
        """
        Publish trading signals to all subscribed order managers.

        Parameters:
        - signals: A list of trading signals to be published.

        Returns:
        - None
        """
        # generate signals from the market data
        for subscriber in self._subscribers:
            subscriber.refresh(self.signals)  # Ensure subscribers are updated before sending signals
    
    def generate_signals(self, data):
        """
        Generate trading signals based on the provided data using the target model.

        Parameters:
        - data: The input data for generating signals.

        Returns:
        - A list of trading signals generated by the target model.
        """
        # Use the target model to predict signals based on the input data
        signals = self._target_model.predict(data)
        
        return signals    